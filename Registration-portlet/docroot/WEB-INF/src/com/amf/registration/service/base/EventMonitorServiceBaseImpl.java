/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.amf.registration.service.base;

import com.amf.registration.model.EventMonitor;
import com.amf.registration.service.AMFUserLocalService;
import com.amf.registration.service.EventMonitorLocalService;
import com.amf.registration.service.EventMonitorService;
import com.amf.registration.service.persistence.AMFUserFinder;
import com.amf.registration.service.persistence.AMFUserPersistence;
import com.amf.registration.service.persistence.EventMonitorPersistence;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import javax.sql.DataSource;

/**
 * The base implementation of the event monitor remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.amf.registration.service.impl.EventMonitorServiceImpl}.
 * </p>
 *
 * @author Sara Liu
 * @see com.amf.registration.service.impl.EventMonitorServiceImpl
 * @see com.amf.registration.service.EventMonitorServiceUtil
 * @generated
 */
public abstract class EventMonitorServiceBaseImpl extends BaseServiceImpl
	implements EventMonitorService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.amf.registration.service.EventMonitorServiceUtil} to access the event monitor remote service.
	 */

	/**
	 * Returns the a m f user local service.
	 *
	 * @return the a m f user local service
	 */
	public AMFUserLocalService getAMFUserLocalService() {
		return amfUserLocalService;
	}

	/**
	 * Sets the a m f user local service.
	 *
	 * @param amfUserLocalService the a m f user local service
	 */
	public void setAMFUserLocalService(AMFUserLocalService amfUserLocalService) {
		this.amfUserLocalService = amfUserLocalService;
	}

	/**
	 * Returns the a m f user persistence.
	 *
	 * @return the a m f user persistence
	 */
	public AMFUserPersistence getAMFUserPersistence() {
		return amfUserPersistence;
	}

	/**
	 * Sets the a m f user persistence.
	 *
	 * @param amfUserPersistence the a m f user persistence
	 */
	public void setAMFUserPersistence(AMFUserPersistence amfUserPersistence) {
		this.amfUserPersistence = amfUserPersistence;
	}

	/**
	 * Returns the a m f user finder.
	 *
	 * @return the a m f user finder
	 */
	public AMFUserFinder getAMFUserFinder() {
		return amfUserFinder;
	}

	/**
	 * Sets the a m f user finder.
	 *
	 * @param amfUserFinder the a m f user finder
	 */
	public void setAMFUserFinder(AMFUserFinder amfUserFinder) {
		this.amfUserFinder = amfUserFinder;
	}

	/**
	 * Returns the event monitor local service.
	 *
	 * @return the event monitor local service
	 */
	public EventMonitorLocalService getEventMonitorLocalService() {
		return eventMonitorLocalService;
	}

	/**
	 * Sets the event monitor local service.
	 *
	 * @param eventMonitorLocalService the event monitor local service
	 */
	public void setEventMonitorLocalService(
		EventMonitorLocalService eventMonitorLocalService) {
		this.eventMonitorLocalService = eventMonitorLocalService;
	}

	/**
	 * Returns the event monitor remote service.
	 *
	 * @return the event monitor remote service
	 */
	public EventMonitorService getEventMonitorService() {
		return eventMonitorService;
	}

	/**
	 * Sets the event monitor remote service.
	 *
	 * @param eventMonitorService the event monitor remote service
	 */
	public void setEventMonitorService(EventMonitorService eventMonitorService) {
		this.eventMonitorService = eventMonitorService;
	}

	/**
	 * Returns the event monitor persistence.
	 *
	 * @return the event monitor persistence
	 */
	public EventMonitorPersistence getEventMonitorPersistence() {
		return eventMonitorPersistence;
	}

	/**
	 * Sets the event monitor persistence.
	 *
	 * @param eventMonitorPersistence the event monitor persistence
	 */
	public void setEventMonitorPersistence(
		EventMonitorPersistence eventMonitorPersistence) {
		this.eventMonitorPersistence = eventMonitorPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return EventMonitor.class;
	}

	protected String getModelClassName() {
		return EventMonitor.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = eventMonitorPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = AMFUserLocalService.class)
	protected AMFUserLocalService amfUserLocalService;
	@BeanReference(type = AMFUserPersistence.class)
	protected AMFUserPersistence amfUserPersistence;
	@BeanReference(type = AMFUserFinder.class)
	protected AMFUserFinder amfUserFinder;
	@BeanReference(type = EventMonitorLocalService.class)
	protected EventMonitorLocalService eventMonitorLocalService;
	@BeanReference(type = EventMonitorService.class)
	protected EventMonitorService eventMonitorService;
	@BeanReference(type = EventMonitorPersistence.class)
	protected EventMonitorPersistence eventMonitorPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private EventMonitorServiceClpInvoker _clpInvoker = new EventMonitorServiceClpInvoker();
}